const API_BASE_URL = '/api';
const DEFAULT_SALARY = 3500;
let currentUser = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const loginForm = document.getElementById('loginForm');
const mainContent = document.getElementById('mainContent');
const loginFormElement = document.getElementById('loginFormElement');
const currentUserNameSpan = document.getElementById('currentUserName');
const workdayForm = document.getElementById('workdayForm');
const salaryPaymentForm = document.getElementById('salaryPaymentForm');
const messageDiv = document.getElementById('message');
const loadWorkdaysBtn = document.getElementById('loadWorkdays');
const loadPaymentsBtn = document.getElementById('loadPayments');
const workdaysContainer = document.getElementById('workdaysContainer');
const paymentsContainer = document.getElementById('paymentsContainer');
const totalDaysSpan = document.getElementById('totalDays');
const totalEarnedSpan = document.getElementById('totalEarned');
const totalBonusSpan = document.getElementById('totalBonus');
const totalPaidSpan = document.getElementById('totalPaid');
const salaryBalanceSpan = document.getElementById('salaryBalance');
const tabs = document.querySelectorAll('.tab');
const tabContents = document.querySelectorAll('.tab-content');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
const reportTypeSelect = document.getElementById('reportType');
const reportYearSelect = document.getElementById('reportYear');
const reportMonthSelect = document.getElementById('reportMonth');
const monthField = document.getElementById('monthField');
const generateReportBtn = document.getElementById('generateReport');
const reportContainer = document.getElementById('reportContainer');
const reportTitle = document.getElementById('reportTitle');
const reportContent = document.getElementById('reportContent');
const exportReportBtn = document.getElementById('exportReport');

// ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =====
async function login(username, password) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        });

        const result = await response.json();

        if (result.success) {
            currentUser = result;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            showMainContent();
            showMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`);
            return true;
        } else {
            showMessage(result.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
            return false;
        }
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        return false;
    }
}

function logout() {
    currentUser = null;
    localStorage.removeItem('currentUser');
    showLoginForm();
    showMessage('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
}

function checkAuth() {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        currentUser = JSON.parse(savedUser);
        showMainContent();
    } else {
        showLoginForm();
    }
}

// ===== UI =====
function showMainContent() {
    loginForm.style.display = 'none';
    mainContent.style.display = 'block';
    currentUserNameSpan.textContent = currentUser.username;
    loadWorkdays();
    loadPayments();
    updateSummary();
    initReports(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
}

function showLoginForm() {
    loginForm.style.display = 'block';
    mainContent.style.display = 'none';
    loginFormElement.reset();
}

// ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
function showMessage(text, type = 'success') {
    messageDiv.textContent = text;
    messageDiv.className = `message ${type}`;
    setTimeout(() => { messageDiv.className = 'message'; }, 5000);
}

function formatDate(dateString) {
    try {
        return new Date(dateString).toLocaleDateString('ru-RU');
    } catch {
        return dateString;
    }
}

function formatMoney(amount) {
    const num = typeof amount === 'string' ? parseFloat(amount) : amount;
    return isNaN(num) ? '0 ‚ÇΩ' : new Intl.NumberFormat('ru-RU').format(num) + ' ‚ÇΩ';
}

function safeNumber(value) {
    if (value === null || value === undefined) return 0;
    if (typeof value === 'number') return value;
    const num = parseFloat(value);
    return isNaN(num) ? 0 : num;
}

// ===== API —Ñ—É–Ω–∫—Ü–∏–∏ =====
async function updateSummary() {
    if (!currentUser) return;
    try {
        const res = await fetch(`${API_BASE_URL}/workdays/statistics?userId=${currentUser.userId}`);
        if (res.ok) {
            const stats = await res.json();
            totalDaysSpan.textContent = safeNumber(stats.totalDays);
            totalEarnedSpan.textContent = formatMoney(stats.totalEarned);

            // –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤
            const totalBonusValue = safeNumber(stats.totalBonus || stats.bonusTotal || 0);
            totalBonusSpan.textContent = formatMoney(totalBonusValue);

            totalPaidSpan.textContent = formatMoney(stats.totalPaid);
            const balance = safeNumber(stats.salaryBalance);
            salaryBalanceSpan.textContent = formatMoney(balance);
            salaryBalanceSpan.className = `summary-value ${balance > 0 ? 'balance-positive' : balance < 0 ? 'balance-negative' : ''}`;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

async function loadWorkdays() {
    if (!currentUser) return;
    try {
        workdaysContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        const res = await fetch(`${API_BASE_URL}/workdays?userId=${currentUser.userId}`);
        if (res.ok) {
            const workdays = await res.json();
            if (!workdays.length) {
                workdaysContainer.innerHTML = '<div class="empty-state">üì≠ –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</div>';
                return;
            }

            workdays.sort((a, b) => new Date(b.workDate) - new Date(a.workDate));

            const monthGroups = {};
            const monthNames = ['–Ø–Ω–≤–∞—Ä—å','–§–µ–≤—Ä–∞–ª—å','–ú–∞—Ä—Ç','–ê–ø—Ä–µ–ª—å','–ú–∞–π','–ò—é–Ω—å','–ò—é–ª—å','–ê–≤–≥—É—Å—Ç','–°–µ–Ω—Ç—è–±—Ä—å','–û–∫—Ç—è–±—Ä—å','–ù–æ—è–±—Ä—å','–î–µ–∫–∞–±—Ä—å'];

            workdays.forEach(day => {
                const date = new Date(day.workDate);
                const key = `${date.getFullYear()}-${date.getMonth()}`;
                if (!monthGroups[key]) monthGroups[key] = {
                    monthName: `${monthNames[date.getMonth()]} ${date.getFullYear()}`,
                    days: [],
                    totalSalary: 0,
                    totalBonus: 0,
                    daysCount: 0
                };
                monthGroups[key].days.push(day);
                monthGroups[key].totalSalary += day.salary;
                monthGroups[key].totalBonus += (day.bonus || 0);
                monthGroups[key].daysCount++;
            });

            const sortedGroups = Object.entries(monthGroups).sort(([a],[b]) => b.localeCompare(a));
            workdaysContainer.innerHTML = '';
            sortedGroups.forEach(([_, group]) => {
                const div = document.createElement('div');
                div.className = 'month-group';
                const totalIncome = group.totalSalary + group.totalBonus;
                div.innerHTML = `
                <div class="month-header">
                    <span>${group.monthName}</span>
                    <span class="month-total">${group.daysCount} –¥–Ω–µ–π ‚Ä¢ ${formatMoney(totalIncome)}</span>
                </div>
                <div class="month-days">
                    ${group.days.map(day => {
                    // –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
                    const bonusHtml = (day.bonus && day.bonus > 0) ? `<span class="workday-bonus">+${formatMoney(day.bonus)} –±–æ–Ω—É—Å</span>` : '';
                    return `
                        <div class="workday-card">
                            <div class="workday-info">
                                <div class="workday-date">
                                    üìÖ ${formatDate(day.workDate)}
                                    <span class="workday-salary">${formatMoney(day.salary)}</span>
                                    ${bonusHtml}
                                </div>
                                <div class="workday-description">${day.description || '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å'}</div>
                            </div>
                            <div class="workday-actions">
                                <button class="btn btn-danger" onclick="deleteWorkday(${day.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    `}).join('')}
                </div>
            `;
                workdaysContainer.appendChild(div);
            });
        }
    } catch (e) {
        workdaysContainer.innerHTML = '<div class="loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    }
}

async function loadPayments() {
    if (!currentUser) return;
    try {
        paymentsContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        const res = await fetch(`${API_BASE_URL}/payments?userId=${currentUser.userId}`);
        if (res.ok) {
            const payments = await res.json();
            if (!payments.length) {
                paymentsContainer.innerHTML = '<div class="empty-state">üí∏ –ù–µ—Ç –≤—ã–ø–ª–∞—Ç</div>';
                return;
            }
            payments.sort((a,b) => new Date(b.paymentDate) - new Date(a.paymentDate));
            paymentsContainer.innerHTML = payments.map(p => `
                <div class="payment-card">
                    <div class="payment-info">
                        <div class="payment-date">üíµ ${formatDate(p.paymentDate)} <span class="payment-amount">${formatMoney(p.amount)}</span></div>
                        <div class="payment-description">${p.description || '–í—ã–ø–ª–∞—Ç–∞'}</div>
                    </div>
                    <div class="payment-actions">
                        <button class="btn btn-danger" onclick="deletePayment(${p.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `).join('');
        }
    } catch(e) {
        paymentsContainer.innerHTML = '<div class="loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    }
}

async function addWorkday(workdayData) {
    if (!currentUser) return;
    try {
        // –§–ò–ö–°: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ bonus –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
        workdayData.bonus = parseInt(workdayData.bonus) || 0;

        const res = await fetch(`${API_BASE_URL}/workdays?userId=${currentUser.userId}`, {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(workdayData)
        });
        if (res.ok) {
            const saved = await res.json();
            // –§–ò–ö–°: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            const bonusText = (saved.bonus && saved.bonus > 0) ? ` + ${formatMoney(saved.bonus)} –¥–æ–ø–¥–æ—Ö–æ–¥` : '';
            showMessage(`–î–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω! +${formatMoney(saved.salary)}${bonusText}`);
            workdayForm.reset();
            document.getElementById('workDate').value = new Date().toISOString().split('T')[0];
            loadWorkdays();
            updateSummary();
        } else {
            const error = await res.json();
            showMessage(error.message || '–û—à–∏–±–∫–∞', 'error');
        }
    } catch(e){ showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error'); }
}

async function addSalaryPayment(paymentData) {
    if (!currentUser) return;
    try {
        const res = await fetch(`${API_BASE_URL}/payments?userId=${currentUser.userId}`, {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify(paymentData)
        });
        if (res.ok) {
            showMessage(`–í—ã–ø–ª–∞—Ç–∞ ${formatMoney(paymentData.amount)} –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
            salaryPaymentForm.reset();
            loadPayments();
            updateSummary();
        } else {
            const error = await res.json();
            showMessage(error.message || '–û—à–∏–±–∫–∞', 'error');
        }
    } catch(e){ showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error'); }
}

async function deleteWorkday(id) {
    if (!currentUser || !confirm('–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å?')) return;
    try {
        const res = await fetch(`${API_BASE_URL}/workdays/${id}?userId=${currentUser.userId}`, { method:'DELETE' });
        if (res.ok) { showMessage('–î–µ–Ω—å —É–¥–∞–ª–µ–Ω'); loadWorkdays(); updateSummary(); }
    } catch(e){ showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error'); }
}

async function deletePayment(id) {
    if (!currentUser || !confirm('–£–¥–∞–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É?')) return;
    try {
        const res = await fetch(`${API_BASE_URL}/payments/${id}?userId=${currentUser.userId}`, { method:'DELETE' });
        if (res.ok) { showMessage('–í—ã–ø–ª–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'); loadPayments(); updateSummary(); }
    } catch(e){ showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error'); }
}

// ===== –û–¢–ß–ï–¢–´ =====
function initReports() {
    initYearSelector();
    setupReportEventListeners();
}

function initYearSelector() {
    const currentYear = new Date().getFullYear();
    reportYearSelect.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º 5 –ª–µ—Ç: –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ -2 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ +2
    for (let year = currentYear - 2; year <= currentYear + 2; year++) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        if (year === currentYear) {
            option.selected = true;
        }
        reportYearSelect.appendChild(option);
    }
}

function setupReportEventListeners() {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    reportTypeSelect.addEventListener('change', function() {
        const isDetailedReport = this.value === 'monthly-detailed';
        monthField.style.display = isDetailedReport ? 'block' : 'none';
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generateReportBtn.addEventListener('click', generateReport);

    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    exportReportBtn.addEventListener('click', exportReport);
}

async function generateReport() {
    if (!currentUser) return;

    const reportType = reportTypeSelect.value;
    const year = parseInt(reportYearSelect.value);
    const month = parseInt(reportMonthSelect.value);

    try {
        showMessage('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...', 'success');
        generateReportBtn.disabled = true;

        let url = `${API_BASE_URL}/reports/${reportType}?userId=${currentUser.userId}&year=${year}`;

        if (reportType === 'monthly-detailed') {
            url += `&month=${month}`;
        }

        const response = await fetch(url);

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞');
        }

        const reportData = await response.json();
        displayReport(reportType, reportData, year, month);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
        showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
    } finally {
        generateReportBtn.disabled = false;
    }
}

function displayReport(reportType, data, year, month) {
    reportContainer.style.display = 'block';
    reportContent.innerHTML = '';

    switch (reportType) {
        case 'monthly':
            displayMonthlyReport(data, year);
            break;
        case 'annual':
            displayAnnualReport(data, year);
            break;
        case 'monthly-detailed':
            displayMonthlyDetailedReport(data, year, month);
            break;
    }
}

function displayMonthlyReport(data, year) {
    reportTitle.textContent = `–û—Ç—á–µ—Ç –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ ${year} –≥–æ–¥`;

    const monthNames = {
        0: '–Ø–Ω–≤–∞—Ä—å', 1: '–§–µ–≤—Ä–∞–ª—å', 2: '–ú–∞—Ä—Ç', 3: '–ê–ø—Ä–µ–ª—å', 4: '–ú–∞–π', 5: '–ò—é–Ω—å',
        6: '–ò—é–ª—å', 7: '–ê–≤–≥—É—Å—Ç', 8: '–°–µ–Ω—Ç—è–±—Ä—å', 9: '–û–∫—Ç—è–±—Ä—å', 10: '–ù–æ—è–±—Ä—å', 11: '–î–µ–∫–∞–±—Ä—å'
    };

    let html = '<div class="month-cards">';

    data.forEach(monthReport => {
        const hasData = monthReport.daysCount > 0;
        const monthName = monthNames[monthReport.monthValue - 1] || monthReport.month;

        html += `
            <div class="month-card ${hasData ? 'active' : ''}">
                <div class="month-header">
                    <span class="month-name">${monthName}</span>
                    <span class="month-days">${monthReport.daysCount} –¥–Ω–µ–π</span>
                </div>
                <div class="month-stats">
                    <div class="stat-item">
                        <div class="stat-value">${formatMoney(monthReport.totalSalary)}</div>
                        <div class="stat-label">–ó–∞—Ä–ø–ª–∞—Ç–∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${formatMoney(monthReport.totalBonus)}</div>
                        <div class="stat-label">–ë–æ–Ω—É—Å—ã</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${formatMoney(monthReport.totalIncome)}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ</div>
                    </div>
                </div>
            </div>
        `;
    });

    html += '</div>';
    reportContent.innerHTML = html;
}

function displayAnnualReport(data, year) {
    reportTitle.textContent = `–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –∑–∞ ${year} –≥–æ–¥`;

    let html = `
        <div class="annual-summary">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${data.totalDays}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –¥–Ω–µ–π</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalSalary)}</div>
                    <div class="stat-label">–û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalBonus)}</div>
                    <div class="stat-label">–û–±—â–∏–µ –±–æ–Ω—É—Å—ã</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalIncome)}</div>
                    <div class="stat-label">–û–±—â–∏–π –¥–æ—Ö–æ–¥</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.averageMonthlyIncome)}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü</div>
                </div>
            </div>
        </div>
        <h3 style="margin-bottom: 15px;">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
        <table class="report-table">
            <thead>
                <tr>
                    <th>–ú–µ—Å—è—Ü</th>
                    <th>–î–Ω–µ–π</th>
                    <th>–ó–∞—Ä–ø–ª–∞—Ç–∞</th>
                    <th>–ë–æ–Ω—É—Å—ã</th>
                    <th>–í—Å–µ–≥–æ</th>
                </tr>
            </thead>
            <tbody>
    `;

    data.monthlyDetails.forEach(month => {
        const monthNames = {
            'JANUARY': '–Ø–Ω–≤–∞—Ä—å', 'FEBRUARY': '–§–µ–≤—Ä–∞–ª—å', 'MARCH': '–ú–∞—Ä—Ç', 'APRIL': '–ê–ø—Ä–µ–ª—å',
            'MAY': '–ú–∞–π', 'JUNE': '–ò—é–Ω—å', 'JULY': '–ò—é–ª—å', 'AUGUST': '–ê–≤–≥—É—Å—Ç',
            'SEPTEMBER': '–°–µ–Ω—Ç—è–±—Ä—å', 'OCTOBER': '–û–∫—Ç—è–±—Ä—å', 'NOVEMBER': '–ù–æ—è–±—Ä—å', 'DECEMBER': '–î–µ–∫–∞–±—Ä—å'
        };

        const monthName = monthNames[month.month] || month.month;

        html += `
            <tr>
                <td>${monthName}</td>
                <td>${month.daysCount}</td>
                <td>${formatMoney(month.totalSalary)}</td>
                <td>${formatMoney(month.totalBonus)}</td>
                <td><strong>${formatMoney(month.totalIncome)}</strong></td>
            </tr>
        `;
    });

    html += `
            </tbody>
        </table>
    `;

    reportContent.innerHTML = html;
}

function displayMonthlyDetailedReport(data, year, month) {
    const monthNames = {
        1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å', 5: '–ú–∞–π', 6: '–ò—é–Ω—å',
        7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç', 9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
    };

    const monthName = monthNames[month];
    reportTitle.textContent = `–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ ${monthName} ${year} –≥–æ–¥–∞`;

    let html = `
        <div class="month-summary" style="margin-bottom: 20px;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${data.daysCount}</div>
                    <div class="stat-label">–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalSalary)}</div>
                    <div class="stat-label">–ó–∞—Ä–ø–ª–∞—Ç–∞</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalBonus)}</div>
                    <div class="stat-label">–ë–æ–Ω—É—Å—ã</div>
                </div>
                <div class="stat-item" style="text-align: center;">
                    <div class="stat-value">${formatMoney(data.totalIncome)}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥</div>
                </div>
            </div>
        </div>
        <h3 style="margin-bottom: 15px;">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º</h3>
    `;

    if (data.workDays && data.workDays.length > 0) {
        data.workDays.forEach(day => {
            html += `
                <div class="detailed-day">
                    <div class="day-header">
                        <span class="day-date">${formatDate(day.workDate)}</span>
                        <div class="day-income">
                            <span class="workday-salary">${formatMoney(day.salary)}</span>
                            ${day.bonus > 0 ? `<span class="workday-bonus">+${formatMoney(day.bonus)}</span>` : ''}
                        </div>
                    </div>
                    <div class="day-description">${day.description || '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å'}</div>
                </div>
            `;
        });
    } else {
        html += '<div class="empty-state"><div>üì≠</div><h3>–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</h3><p>–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –±—ã–ª–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</p></div>';
    }

    reportContent.innerHTML = html;
}

function exportReport() {
    const reportTitleText = reportTitle.textContent;
    const reportContentHtml = reportContent.innerHTML;

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = `
        <h1>${reportTitleText}</h1>
        <div>${reportContentHtml}</div>
        <div style="margin-top: 20px; font-size: 12px; color: #666;">
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}
        </div>
    `;

    // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>${reportTitleText}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                    th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                    th { background-color: #f5f5f5; }
                    .month-card { border: 1px solid #ddd; padding: 15px; margin-bottom: 10px; border-radius: 5px; }
                    .stat-item { text-align: center; margin-bottom: 10px; }
                </style>
            </head>
            <body>
                ${tempDiv.innerHTML}
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π =====
loginFormElement.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = new FormData(loginFormElement);
    await login(data.get('username'), data.get('password'));
});

workdayForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = new FormData(workdayForm);
    const salary = data.get('salary') || DEFAULT_SALARY;
    const bonus = data.get('bonus') || 0;

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        workDate: data.get('workDate'),
        description: data.get('description'),
        salary: parseInt(salary),
        bonus: parseInt(bonus)
    });

    await addWorkday({
        workDate: data.get('workDate'),
        description: data.get('description'),
        salary: parseInt(salary),
        bonus: parseInt(bonus)
    });
});

salaryPaymentForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = new FormData(salaryPaymentForm);
    await addSalaryPayment({
        amount: parseFloat(data.get('amount')),
        description: data.get('paymentDescription')
    });
});

loadWorkdaysBtn.addEventListener('click', loadWorkdays);
loadPaymentsBtn.addEventListener('click', loadPayments);

tabs.forEach(tab => {
    tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        document.getElementById(`${tab.getAttribute('data-tab')}Tab`).classList.add('active');
    });
});

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
document.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    document.getElementById('workDate').value = new Date().toISOString().split('T')[0];
});

// ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
window.deleteWorkday = deleteWorkday;
window.deletePayment = deletePayment;
window.logout = logout;
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ script.js

function initializeCollapsibleDays() {
    const workdaysContainer = document.getElementById('workdaysContainer');

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    if (!document.getElementById('toggleDaysBtn')) {
        const toggleBtn = document.createElement('button');
        toggleBtn.id = 'toggleDaysBtn';
        toggleBtn.className = 'btn btn-secondary toggle-btn';
        toggleBtn.innerHTML = 'üìÇ –°–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π';
        toggleBtn.onclick = toggleWorkdaysList;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–Ω–µ–π
        workdaysContainer.parentNode.insertBefore(toggleBtn, workdaysContainer);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    workdaysContainer.classList.add('collapsible');
}

function toggleWorkdaysList() {
    const workdaysContainer = document.getElementById('workdaysContainer');
    const toggleBtn = document.getElementById('toggleDaysBtn');

    if (workdaysContainer.classList.contains('collapsed')) {
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        workdaysContainer.classList.remove('collapsed');
        toggleBtn.innerHTML = 'üìÇ –°–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π';
        toggleBtn.classList.remove('collapsed');
    } else {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        workdaysContainer.classList.add('collapsed');
        toggleBtn.innerHTML = 'üìÅ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π';
        toggleBtn.classList.add('collapsed');
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadWorkdays
async function loadWorkdays() {
    try {
        const userId = localStorage.getItem('userId');
        if (!userId) return;

        const response = await fetch(`/api/workdays/user/${userId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–π');

        const workdays = await response.json();
        displayWorkdays(workdays);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        initializeCollapsibleDays();

    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: ' + error.message, 'error');
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é displayWorkdays
function displayWorkdays(workdays) {
    const container = document.getElementById('workdaysContainer');

    if (!workdays || workdays.length === 0) {
        container.innerHTML = '<div class="no-data">–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</div>';
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    workdays.sort((a, b) => new Date(b.workDate) - new Date(a.workDate));

    const workdaysList = workdays.map(day => {
        const date = new Date(day.workDate).toLocaleDateString('ru-RU');
        const salary = day.salary ? formatCurrency(day.salary) : '0 ‚ÇΩ';
        const bonus = day.bonus ? formatCurrency(day.bonus) : '0 ‚ÇΩ';
        const total = formatCurrency((day.salary || 0) + (day.bonus || 0));

        return `
            <div class="workday-item" data-date="${day.workDate}">
                <div class="workday-header">
                    <span class="workday-date">üìÖ ${date}</span>
                    <span class="workday-total">${total}</span>
                    <button class="btn-delete" onclick="deleteWorkday(${day.id})">‚ùå</button>
                </div>
                <div class="workday-details">
                    <div class="workday-detail">üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: ${salary}</div>
                    <div class="workday-detail">üéÅ –î–æ–ø–¥–æ—Ö–æ–¥: ${bonus}</div>
                    ${day.description ? `<div class="workday-detail">üìù ${day.description}</div>` : ''}
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = workdaysList;
}