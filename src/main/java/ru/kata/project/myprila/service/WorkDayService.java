package ru.kata.project.myprila.service;

import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.kata.project.myprila.entity.SalaryPayment;
import ru.kata.project.myprila.entity.User;
import ru.kata.project.myprila.entity.WorkDay;
import ru.kata.project.myprila.repo.SalaryPaymentRepository;
import ru.kata.project.myprila.repo.UserRepository;
import ru.kata.project.myprila.repo.WorkDayReposytory;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class WorkDayService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SalaryPaymentRepository salaryPaymentRepository;

    @Autowired
    private WorkDayReposytory workDayRepository;

    private static final BigDecimal DEFAULT_SALARY = new BigDecimal("3500.00");
    private static final BigDecimal ZERO = BigDecimal.ZERO;

    // ========== –†–ê–ë–û–ß–ò–ï –î–ù–ò ==========

    public List<WorkDay> getUserWorkDays(Long userId) {
        validateUserExists(userId);
        return workDayRepository.findByUserIdOrderByWorkDateDesc(userId);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
     * –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç—É, –∏ –±–æ–Ω—É—Å, –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ
     */
    public WorkDay addOrUpdateWorkDay(LocalDate workDate, String description, BigDecimal salary, BigDecimal bonus, Long userId) {
        User user = validateUserExists(userId);

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
        Optional<WorkDay> existingDay = workDayRepository.findByWorkDateAndUserId(workDate, userId);

        WorkDay workDay;

        if (existingDay.isPresent()) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
            workDay = existingDay.get();

            if (description != null && !description.trim().isEmpty()) {
                workDay.setDescription(description);
            }
            if (salary != null && salary.compareTo(ZERO) >= 0) {
                workDay.setSalary(salary);
            }
            if (bonus != null && bonus.compareTo(ZERO) >= 0) {
                workDay.setBonus(bonus);
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
            workDay = new WorkDay();
            workDay.setWorkDate(workDate);
            workDay.setUser(user);
            workDay.setDescription(description != null ? description : "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å");
            workDay.setSalary(salary != null ? salary : DEFAULT_SALARY);
            workDay.setBonus(bonus != null ? bonus : ZERO);
        }

        return workDayRepository.save(workDay);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞)
     */
    public WorkDay addSalaryOnly(LocalDate workDate, BigDecimal salary, String description, Long userId) {
        User user = validateUserExists(userId);

        if (salary == null || salary.compareTo(ZERO) < 0) {
            throw new RuntimeException("–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
        }

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
        Optional<WorkDay> existingDay = workDayRepository.findByWorkDateAndUserId(workDate, userId);

        WorkDay workDay;

        if (existingDay.isPresent()) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –¥–Ω–µ
            workDay = existingDay.get();
            workDay.setSalary(salary);
            if (description != null && !description.trim().isEmpty()) {
                workDay.setDescription(description);
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º
            workDay = new WorkDay();
            workDay.setWorkDate(workDate);
            workDay.setUser(user);
            workDay.setDescription(description != null ? description : "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å");
            workDay.setSalary(salary);
            workDay.setBonus(ZERO);
        }

        return workDayRepository.save(workDay);
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞)
     */
    public WorkDay addBonusOnly(LocalDate workDate, BigDecimal bonus, String description, Long userId) {
        User user = validateUserExists(userId);

        if (bonus == null || bonus.compareTo(ZERO) < 0) {
            throw new RuntimeException("–ë–æ–Ω—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
        }

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
        Optional<WorkDay> existingDay = workDayRepository.findByWorkDateAndUserId(workDate, userId);

        WorkDay workDay;

        if (existingDay.isPresent()) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –¥–Ω–µ
            workDay = existingDay.get();
            workDay.setBonus(bonus);
            if (description != null && !description.trim().isEmpty()) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (workDay.getDescription() != null && !workDay.getDescription().contains(description)) {
                    workDay.setDescription(workDay.getDescription() + "; " + description);
                } else if (workDay.getDescription() == null) {
                    workDay.setDescription(description);
                }
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ —Å –±–æ–Ω—É—Å–æ–º
            workDay = new WorkDay();
            workDay.setWorkDate(workDate);
            workDay.setUser(user);
            workDay.setDescription(description != null ? description : "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥");
            workDay.setSalary(ZERO); // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 0
            workDay.setBonus(bonus);
        }

        return workDayRepository.save(workDay);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ –¥–∞—Ç–µ
     */
    public Optional<WorkDay> getWorkDayByDate(LocalDate workDate, Long userId) {
        validateUserExists(userId);
        return workDayRepository.findByWorkDateAndUserId(workDate, userId);
    }

    public WorkDay updateWorkDay(Long workDayId, WorkDay workDayUpdates, Long userId) {
        validateUserExists(userId);

        WorkDay existingWorkDay = workDayRepository.findByIdAndUserId(workDayId, userId)
                .orElseThrow(() -> new RuntimeException("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (workDayUpdates.getDescription() != null) {
            existingWorkDay.setDescription(workDayUpdates.getDescription());
        }
        if (workDayUpdates.getSalary() != null && workDayUpdates.getSalary().compareTo(ZERO) >= 0) {
            existingWorkDay.setSalary(workDayUpdates.getSalary());
        }
        if (workDayUpdates.getBonus() != null && workDayUpdates.getBonus().compareTo(ZERO) >= 0) {
            existingWorkDay.setBonus(workDayUpdates.getBonus());
        }

        return workDayRepository.save(existingWorkDay);
    }

    public void deleteWorkDay(Long workDayId, Long userId) {
        validateUserExists(userId);

        WorkDay workDay = workDayRepository.findByIdAndUserId(workDayId, userId)
                .orElseThrow(() -> new RuntimeException("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        workDayRepository.delete(workDay);
    }

    // ========== –í–´–ü–õ–ê–¢–´ ==========

    public SalaryPayment addSalaryPayment(BigDecimal amount, String description, Long userId) {
        User user = validateUserExists(userId);

        if (amount == null || amount.compareTo(ZERO) <= 0) {
            throw new RuntimeException("–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }

        SalaryPayment payment = new SalaryPayment(amount, description, user);
        return salaryPaymentRepository.save(payment);
    }

    public List<SalaryPayment> getUserSalaryPayments(Long userId) {
        validateUserExists(userId);
        return salaryPaymentRepository.findByUserIdOrderByPaymentDateDesc(userId);
    }

    public void deleteSalaryPayment(Long paymentId, Long userId) {
        validateUserExists(userId);

        SalaryPayment payment = salaryPaymentRepository.findByIdAndUserId(paymentId, userId)
                .orElseThrow(() -> new RuntimeException("–í—ã–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        salaryPaymentRepository.delete(payment);
    }

    // ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

    public WorkDayStatistics getStatistics(Long userId) {
        validateUserExists(userId);

        LocalDate now = LocalDate.now();
        LocalDate startOfMonth = now.withDayOfMonth(1);
        LocalDate endOfMonth = now.withDayOfMonth(now.lengthOfMonth());

        // üìä –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        List<WorkDay> currentMonthDays = workDayRepository.findByWorkDateBetween(startOfMonth, endOfMonth)
                .stream()
                .filter(day -> day.getUser().getId().equals(userId))
                .toList();

        List<SalaryPayment> currentMonthPayments = salaryPaymentRepository.findByUserIdAndPaymentDateBetween(
                userId,
                startOfMonth.atStartOfDay(),
                endOfMonth.atTime(23, 59, 59)
        );

        // üìä –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–æ—à–ª—ã—Ö –º–µ—Å—è—Ü–µ–≤ (–¥–ª—è –¥–æ–ª–≥–∞)
        List<WorkDay> allUserDays = workDayRepository.findByUserId(userId);
        List<SalaryPayment> allUserPayments = salaryPaymentRepository.findByUserId(userId);

        BigDecimal totalSalaryBefore = allUserDays.stream()
                .filter(day -> day.getWorkDate().isBefore(startOfMonth))
                .map(day -> day.getSalary() != null ? day.getSalary() : BigDecimal.ZERO)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalPaidBefore = allUserPayments.stream()
                .filter(p -> p.getPaymentDate().toLocalDate().isBefore(startOfMonth))
                .map(SalaryPayment::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // üí∞ –î–æ–ª–≥ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        BigDecimal carriedDebt = totalSalaryBefore.subtract(totalPaidBefore);
        if (carriedDebt.compareTo(BigDecimal.ZERO) < 0) {
            carriedDebt = BigDecimal.ZERO; // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ ‚Äî –¥–æ–ª–≥ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
        }

        // ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ –±–æ–Ω—É—Å—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        BigDecimal totalSalary = currentMonthDays.stream()
                .map(day -> day.getSalary() != null ? day.getSalary() : BigDecimal.ZERO)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalBonus = currentMonthDays.stream()
                .map(day -> day.getBonus() != null ? day.getBonus() : BigDecimal.ZERO)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalEarned = totalSalary.add(totalBonus);

        BigDecimal totalPaid = currentMonthPayments.stream()
                .map(SalaryPayment::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // üßæ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (—Å —É—á—ë—Ç–æ–º –¥–æ–ª–≥–∞)
        BigDecimal salaryBalance = totalSalary.add(carriedDebt).subtract(totalPaid);

        return new WorkDayStatistics(
                currentMonthDays.size(),
                totalEarned,
                totalSalary,
                totalBonus,
                totalPaid,
                salaryBalance
        );
    }
    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

    private User validateUserExists(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    // ========== –ö–õ–ê–°–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

    public static class WorkDayStatistics {
        private final int totalDays;
        private final BigDecimal totalEarned;  // –∑–∞—Ä–ø–ª–∞—Ç–∞ + –±–æ–Ω—É—Å—ã (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        private final BigDecimal totalSalary;  // —Ç–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–∞)
        private final BigDecimal totalBonus;   // —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å—ã
        private final BigDecimal totalPaid;    // –≤—ã–ø–ª–∞—á–µ–Ω–æ
        private final BigDecimal salaryBalance; // –±–∞–ª–∞–Ω—Å (–∑–∞—Ä–ø–ª–∞—Ç–∞ - –≤—ã–ø–ª–∞—Ç—ã)

        public WorkDayStatistics(int totalDays, BigDecimal totalEarned, BigDecimal totalSalary,
                                 BigDecimal totalBonus, BigDecimal totalPaid, BigDecimal salaryBalance) {
            this.totalDays = totalDays;
            this.totalEarned = totalEarned;
            this.totalSalary = totalSalary;
            this.totalBonus = totalBonus;
            this.totalPaid = totalPaid;
            this.salaryBalance = salaryBalance;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getTotalDays() {
            return totalDays;
        }

        public BigDecimal getTotalEarned() {
            return totalEarned;
        }

        public BigDecimal getTotalSalary() {
            return totalSalary;
        }

        public BigDecimal getTotalBonus() {
            return totalBonus;
        }

        public BigDecimal getTotalPaid() {
            return totalPaid;
        }

        public BigDecimal getSalaryBalance() {
            return salaryBalance;
        }
    }
}