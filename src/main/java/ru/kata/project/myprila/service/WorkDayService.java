package ru.kata.project.myprila.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.kata.project.myprila.entity.SalaryPayment;
import ru.kata.project.myprila.entity.WorkDay;
import ru.kata.project.myprila.repo.SalaryPaymentRepository;
import ru.kata.project.myprila.repo.WorkDayReposytory;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class WorkDayService {

    private static final Logger logger = LoggerFactory.getLogger(WorkDayService.class);

    @Autowired
    private SalaryPaymentRepository salaryPaymentRepository;

    @Autowired
    private WorkDayReposytory workDayRepository;

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
    public List<WorkDay> getAllWorkDays() {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π");
        try {
            List<WorkDay> workDays = workDayRepository.findAllByOrderByWorkDateDesc();
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", workDays.size());
            return workDays;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage(), e);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ ID
    public Optional<WorkDay> getWorkDayById(Long id) {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –ø–æ ID: {}", id);
        try {
            Optional<WorkDay> workDay = workDayRepository.findById(id);
            if (workDay.isPresent()) {
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {}", workDay.get());
            } else {
                logger.warn("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", id);
            }
            return workDay;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –ø–æ ID {}: {}", id, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage(), e);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    public WorkDay saveWorkDay(WorkDay workDay) {
        logger.info("üîÑ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WorkDay: {}", workDay.getWorkDate());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (workDay.getWorkDate() == null) {
                String error = "–î–∞—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π";
                logger.error("‚ùå {}", error);
                throw new RuntimeException(error);
            }

            if (workDay.getWorkDate().isAfter(LocalDate.now())) {
                logger.warn("‚ö†Ô∏è –°–æ–∑–¥–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ –±—É–¥—É—â–µ–º: {}", workDay.getWorkDate());
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¥–Ω—è —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∞—Ç—É: {}", workDay.getWorkDate());
            boolean exists = workDayRepository.existsByWorkDate(workDay.getWorkDate());
            logger.info("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {}", exists);

            if (exists) {
                String error = "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞ –¥–∞—Ç—É " + workDay.getWorkDate() + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
                logger.error("‚ùå {}", error);
                throw new RuntimeException(error);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É 3500 —Ä—É–±–ª–µ–π, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if (workDay.getSalary() == null || workDay.getSalary() == 0) {
                workDay.setSalary(3500);
                logger.info("üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}", workDay.getSalary());
            } else {
                logger.info("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {}", workDay.getSalary());
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º
            logger.info("üíæ –í—ã–∑–æ–≤ workDayRepository.save()");
            WorkDay saved = workDayRepository.save(workDay);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω WorkDay —Å ID: {}, –î–∞—Ç–∞: {}, –ó–∞—Ä–ø–ª–∞—Ç–∞: {}",
                    saved.getId(), saved.getWorkDate(), saved.getSalary());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
            boolean existsAfterSave = workDayRepository.existsById(saved.getId());
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {}", existsAfterSave);

            if (!existsAfterSave) {
                logger.error("üö® –ó–ê–ü–ò–°–¨ –ù–ï –°–û–•–†–ê–ù–ò–õ–ê–°–¨ –í –ë–ê–ó–ï! ID: {}", saved.getId());
                throw new RuntimeException("–ó–∞–ø–∏—Å—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            }

            return saved;

        } catch (RuntimeException e) {
            // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            throw e;
        } catch (Exception e) {
            logger.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ WorkDay:", e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage(), e);
        }
    }

    // –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    public void deleteWorkDay(Long id) {
        logger.info("üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å ID: {}", id);

        try {
            boolean exists = workDayRepository.existsById(id);
            logger.info("üìã –ó–∞–ø–∏—Å—å —Å ID {} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", id, exists);

            if (exists) {
                workDayRepository.deleteById(id);
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å ID: {}", id);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å
                boolean existsAfterDelete = workDayRepository.existsById(id);
                if (existsAfterDelete) {
                    logger.error("üö® –ó–ê–ü–ò–°–¨ –ù–ï –£–î–ê–õ–ò–õ–ê–°–¨! ID: {}", id);
                    throw new RuntimeException("–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
                }
            } else {
                String error = "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω";
                logger.error("‚ùå {}", error);
                throw new RuntimeException(error);
            }
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å ID {}: {}", id, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + e.getMessage(), e);
        }
    }

    // üìä –ú–ï–¢–û–î–´ –î–õ–Ø –£–ß–ï–¢–ê –ó–ê–†–ü–õ–ê–¢–´

    public SalaryPayment addSalaryPayment(BigDecimal amount, String description) {
        logger.info("üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã: {}, {}", amount, description);

        try {
            if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
                throw new RuntimeException("–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            }

            SalaryPayment payment = new SalaryPayment(amount, description);
            SalaryPayment saved = salaryPaymentRepository.save(payment);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ —Å ID: {}", saved.getId());
            return saved;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã: " + e.getMessage(), e);
        }
    }

    public List<SalaryPayment> getAllSalaryPayments() {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç");
        try {
            List<SalaryPayment> payments = salaryPaymentRepository.findAllByOrderByPaymentDateDesc();
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –≤—ã–ø–ª–∞—Ç", payments.size());
            return payments;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç: " + e.getMessage(), e);
        }
    }

    public void deleteSalaryPayment(Long id) {
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã —Å ID: {}", id);
        try {
            if (salaryPaymentRepository.existsById(id)) {
                salaryPaymentRepository.deleteById(id);
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ —Å ID: {}", id);
            } else {
                throw new RuntimeException("–í—ã–ø–ª–∞—Ç–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã: " + e.getMessage(), e);
        }
    }

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
    public BigDecimal getTotalEarned() {
        logger.debug("üßÆ –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞");
        try {
            List<WorkDay> workDays = workDayRepository.findAll();
            BigDecimal total = workDays.stream()
                    .map(workDay -> BigDecimal.valueOf(workDay.getSalary()))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            logger.debug("üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {}", total);
            return total;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {}", e.getMessage(), e);
            return BigDecimal.ZERO;
        }
    }

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç
    public BigDecimal getTotalPaid() {
        logger.debug("üßÆ –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –≤—ã–ø–ª–∞—Ç");
        try {
            List<SalaryPayment> payments = salaryPaymentRepository.findAll();
            BigDecimal total = payments.stream()
                    .map(SalaryPayment::getAmount)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            logger.debug("üí∞ –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: {}", total);
            return total;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—â–∏—Ö –≤—ã–ø–ª–∞—Ç: {}", e.getMessage(), e);
            return BigDecimal.ZERO;
        }
    }

    // –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ (–¥–æ–ª–≥ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)
    public BigDecimal getSalaryBalance() {
        logger.debug("üßÆ –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã");
        try {
            BigDecimal totalEarned = getTotalEarned();
            BigDecimal totalPaid = getTotalPaid();
            BigDecimal balance = totalEarned.subtract(totalPaid);
            logger.debug("üí∞ –ë–∞–ª–∞–Ω—Å –∑–∞—Ä–ø–ª–∞—Ç—ã: {} (–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {}, –≤—ã–ø–ª–∞—á–µ–Ω–æ: {})",
                    balance, totalEarned, totalPaid);
            return balance;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã: {}", e.getMessage(), e);
            return BigDecimal.ZERO;
        }
    }

    // üìà –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    public WorkDayStatistics getStatistics() {
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        try {
            List<WorkDay> allDays = workDayRepository.findAll();
            int totalDays = allDays.size();
            BigDecimal totalEarned = getTotalEarned();
            BigDecimal totalPaid = getTotalPaid();
            BigDecimal salaryBalance = getSalaryBalance();

            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–Ω–µ–π={}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ={}, –≤—ã–ø–ª–∞—á–µ–Ω–æ={}, –±–∞–ª–∞–Ω—Å={}",
                    totalDays, totalEarned, totalPaid, salaryBalance);

            return new WorkDayStatistics(totalDays, totalEarned, totalPaid, salaryBalance);
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage(), e);
        }
    }

    // üìä –ï–î–ò–ù–´–ô –ö–õ–ê–°–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    public static class WorkDayStatistics {
        private final int totalDays;
        private final BigDecimal totalEarned;
        private final BigDecimal totalPaid;
        private final BigDecimal salaryBalance;

        public WorkDayStatistics(int totalDays, BigDecimal totalEarned,
                                 BigDecimal totalPaid, BigDecimal salaryBalance) {
            this.totalDays = totalDays;
            this.totalEarned = totalEarned;
            this.totalPaid = totalPaid;
            this.salaryBalance = salaryBalance;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getTotalDays() { return totalDays; }
        public BigDecimal getTotalEarned() { return totalEarned; }
        public BigDecimal getTotalPaid() { return totalPaid; }
        public BigDecimal getSalaryBalance() { return salaryBalance; }
    }

    // üìç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò

    public String getServiceStatus() {
        try {
            long workDayCount = workDayRepository.count();
            long salaryPaymentCount = salaryPaymentRepository.count();
            return String.format("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. WorkDays: %d, SalaryPayments: %d",
                    workDayCount, salaryPaymentCount);
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: " + e.getMessage();
        }
    }

    public WorkDay createTestWorkDay() {
        LocalDate testDate = LocalDate.now().plusYears(1); // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        WorkDay testDay = new WorkDay(testDate, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ —Å–µ—Ä–≤–∏—Å–∞");
        return saveWorkDay(testDay);
    }
}