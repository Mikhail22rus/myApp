package ru.kata.project.myprila.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.kata.project.myprila.entity.SalaryPayment;
import ru.kata.project.myprila.entity.User;
import ru.kata.project.myprila.entity.WorkDay;
import ru.kata.project.myprila.repo.SalaryPaymentRepository;
import ru.kata.project.myprila.repo.UserRepository;
import ru.kata.project.myprila.repo.WorkDayReposytory;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class WorkDayService {

    private static final Logger logger = LoggerFactory.getLogger(WorkDayService.class);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SalaryPaymentRepository salaryPaymentRepository;

    @Autowired
    private WorkDayReposytory workDayRepository;

    // ========== –†–ê–ë–û–ß–ò–ï –î–ù–ò ==========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<WorkDay> getUserWorkDays(Long userId) {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);
        try {
            validateUserExists(userId);
            List<WorkDay> workDays = workDayRepository.findByUserIdOrderByWorkDateDesc(userId);
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", workDays.size(), userId);
            return workDays;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public Optional<WorkDay> getUserWorkDayById(Long workDayId, Long userId) {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", workDayId, userId);
        try {
            validateUserExists(userId);
            Optional<WorkDay> workDay = workDayRepository.findByIdAndUserId(workDayId, userId);
            if (workDay.isPresent()) {
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {}", workDay.get());
            } else {
                logger.warn("‚ö†Ô∏è –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}", workDayId, userId);
            }
            return workDay;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", workDayId, userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: " + e.getMessage(), e);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public WorkDay createWorkDay(WorkDay workDay, Long userId) {
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}, –¥–∞—Ç–∞: {}", userId, workDay.getWorkDate());

        try {
            User user = validateUserExists(userId);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            validateWorkDayData(workDay);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¥–Ω—è —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (workDayRepository.existsByWorkDateAndUserId(workDay.getWorkDate(), userId)) {
                String error = "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞ –¥–∞—Ç—É " + workDay.getWorkDate() + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
                logger.error("‚ùå {}", error);
                throw new RuntimeException(error);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            workDay.setUser(user);
            if (workDay.getSalary() == null || workDay.getSalary() == 0) {
                workDay.setSalary(3500);
                logger.info("üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}", workDay.getSalary());
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º
            WorkDay savedWorkDay = workDayRepository.save(workDay);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", savedWorkDay.getId(), userId);

            return savedWorkDay;

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: " + e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
     */
    public WorkDay updateWorkDay(Long workDayId, WorkDay workDayUpdates, Long userId) {
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", workDayId, userId);

        try {
            validateUserExists(userId);

            // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            WorkDay existingWorkDay = workDayRepository.findByIdAndUserId(workDayId, userId)
                    .orElseThrow(() -> new RuntimeException("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è (–∫—Ä–æ–º–µ –¥–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if (workDayUpdates.getDescription() != null) {
                existingWorkDay.setDescription(workDayUpdates.getDescription());
            }
            if (workDayUpdates.getSalary() != null && workDayUpdates.getSalary() > 0) {
                existingWorkDay.setSalary(workDayUpdates.getSalary());
            }

            WorkDay updatedWorkDay = workDayRepository.save(existingWorkDay);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å ID: {}", workDayId);

            return updatedWorkDay;

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", workDayId, userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: " + e.getMessage(), e);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void deleteWorkDay(Long workDayId, Long userId) {
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", workDayId, userId);

        try {
            validateUserExists(userId);

            WorkDay workDay = workDayRepository.findByIdAndUserId(workDayId, userId)
                    .orElseThrow(() -> new RuntimeException("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            workDayRepository.delete(workDay);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", workDayId, userId);

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è ID {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", workDayId, userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: " + e.getMessage(), e);
        }
    }

    // ========== –í–´–ü–õ–ê–¢–´ –ó–ê–†–ü–õ–ê–¢–´ ==========

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SalaryPayment addSalaryPayment(BigDecimal amount, String description, Long userId) {
        logger.info("üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}, —Å—É–º–º–∞: {}, –æ–ø–∏—Å–∞–Ω–∏–µ: {}", userId, amount, description);

        try {
            User user = validateUserExists(userId);

            if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
                throw new RuntimeException("–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            }

            SalaryPayment payment = new SalaryPayment(amount, description, user);
            SalaryPayment savedPayment = salaryPaymentRepository.save(payment);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", savedPayment.getId(), userId);

            return savedPayment;

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<SalaryPayment> getUserSalaryPayments(Long userId) {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        try {
            validateUserExists(userId);
            List<SalaryPayment> payments = salaryPaymentRepository.findByUserIdOrderByPaymentDateDesc(userId);
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", payments.size(), userId);
            return payments;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç: " + e.getMessage(), e);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void deleteSalaryPayment(Long paymentId, Long userId) {
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", paymentId, userId);

        try {
            validateUserExists(userId);

            SalaryPayment payment = salaryPaymentRepository.findByIdAndUserId(paymentId, userId)
                    .orElseThrow(() -> new RuntimeException("–í—ã–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

            salaryPaymentRepository.delete(payment);
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ ID: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", paymentId, userId);

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã ID {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", paymentId, userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã: " + e.getMessage(), e);
        }
    }

    // ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –§–ò–ù–ê–ù–°–´ ==========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public WorkDayStatistics getStatistics(Long userId) {
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        try {
            validateUserExists(userId);

            List<WorkDay> userDays = workDayRepository.findByUserId(userId);
            List<SalaryPayment> userPayments = salaryPaymentRepository.findByUserId(userId);

            int totalDays = userDays.size();
            BigDecimal totalEarned = calculateTotalEarned(userDays);
            BigDecimal totalPaid = calculateTotalPaid(userPayments);
            BigDecimal salaryBalance = totalEarned.subtract(totalPaid);

            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: –¥–Ω–µ–π={}, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ={}, –≤—ã–ø–ª–∞—á–µ–Ω–æ={}, –±–∞–ª–∞–Ω—Å={}",
                    userId, totalDays, totalEarned, totalPaid, salaryBalance);

            return new WorkDayStatistics(totalDays, totalEarned, totalPaid, salaryBalance);

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public BigDecimal getSalaryBalance(Long userId) {
        logger.debug("üßÆ –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

        try {
            validateUserExists(userId);

            WorkDayStatistics stats = getStatistics(userId);
            return stats.getSalaryBalance();

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}: {}", userId, e.getMessage(), e);
            return BigDecimal.ZERO;
        }
    }

    // ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private User validateUserExists(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
     */
    private void validateWorkDayData(WorkDay workDay) {
        if (workDay.getWorkDate() == null) {
            throw new RuntimeException("–î–∞—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
        }

        if (workDay.getWorkDate().isAfter(LocalDate.now())) {
            logger.warn("‚ö†Ô∏è –°–æ–∑–¥–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ –±—É–¥—É—â–µ–º: {}", workDay.getWorkDate());
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
     */
    private BigDecimal calculateTotalEarned(List<WorkDay> workDays) {
        return workDays.stream()
                .map(day -> BigDecimal.valueOf(day.getSalary()))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –≤—ã–ø–ª–∞—Ç
     */
    private BigDecimal calculateTotalPaid(List<SalaryPayment> payments) {
        return payments.stream()
                .map(SalaryPayment::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    public String getServiceStatus(Long userId) {
        try {
            validateUserExists(userId);
            long workDayCount = workDayRepository.countByUserId(userId);
            long salaryPaymentCount = salaryPaymentRepository.countByUserId(userId);
            return String.format("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %d, WorkDays: %d, Payments: %d",
                    userId, workDayCount, salaryPaymentCount);
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: " + e.getMessage();
        }
    }

    // ========== –ö–õ–ê–°–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

    public static class WorkDayStatistics {
        private final int totalDays;
        private final BigDecimal totalEarned;
        private final BigDecimal totalPaid;
        private final BigDecimal salaryBalance;

        public WorkDayStatistics(int totalDays, BigDecimal totalEarned,
                                 BigDecimal totalPaid, BigDecimal salaryBalance) {
            this.totalDays = totalDays;
            this.totalEarned = totalEarned;
            this.totalPaid = totalPaid;
            this.salaryBalance = salaryBalance;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getTotalDays() { return totalDays; }
        public BigDecimal getTotalEarned() { return totalEarned; }
        public BigDecimal getTotalPaid() { return totalPaid; }
        public BigDecimal getSalaryBalance() { return salaryBalance; }
    }
}